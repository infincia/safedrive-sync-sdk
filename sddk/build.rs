extern crate cheddar;

fn main() {
    let target = std::env::var("TARGET").unwrap();


    if cfg!(target_os = "macos") {
        println!("cargo:rustc-link-args=-mmacosx-version-min=10.9");
    }

    let build_prefix = std::env::var("BUILD_PREFIX").unwrap();

    if target.contains("gnu") {
        println!("cargo:rustc-link-search=native=/usr/lib");
        println!("cargo:include=/usr/include");
    }

    println!("cargo:rustc-link-search=native={}/lib", build_prefix);
    println!("cargo:include={}/include", build_prefix);

    println!("cargo:rustc-link-lib=static=ssh2");

    println!("cargo:rustc-link-lib=static=sodium");

    if target.contains("msvc") {
        println!("cargo:rustc-link-lib=static=crypto");
        println!("cargo:rustc-link-lib=static=ssl");
        println!("cargo:rustc-link-lib=static=tls");

        println!("cargo:rustc-link-lib=bcrypt");
        println!("cargo:rustc-link-lib=crypt32");
        println!("cargo:rustc-link-lib=user32");
    }

    println!("cargo:rerun-if-changed=src/lib.rs");
    println!("cargo:rerun-if-changed=src/c_api.rs");
    println!("cargo:rerun-if-changed=../release.sh");

    cheddar::Cheddar::new().expect("could not read manifest")
        .insert_code("// THIS FILE IS AUTOGENERATED - DO NOT EDIT\n\n")
        .module("c_api").expect("malformed module path")
        .run_build("../include/sddk.h");
}
